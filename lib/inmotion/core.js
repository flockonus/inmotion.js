/**
 * @author @flockonus
 * @classDescription The class responsible for animation itself
 * 
 * On the contruction should be fed with a valid canvas_id to draw on.
 * This class does not erase, it just draw, so I consider it non-ubtrusive, it is supposed to play well with other engines
 * 
 * In the future this class should split in various, but for now it is ok
 */

function InMotion(canvas_id){
	var instance = this
	this.class_name = "InMotion"
	
	instance.canvas_id = canvas_id
	//continue from here and copy some stuff from Editor class
	
	/**
	 * Step on the current time, print on the canvas
	 */
	this.step = step
	/**
	 * Create a animation that is actionable
	 * @param id [{string}] [This will be used fot all refs]
	 * @param model [{string}] [A string generated by the Editor]
	 */ 
	this.create = create;
	/**
	 * Create a animation based on a existing one
	 * @param base_id [{string}] [The animation to be cloned from]
	 * @param new_id [{string}] [Another animation from the refering model]
	 */
	this.create_from = create_from;
	/**
	 * Set the stated of a given animation as Playing
	 * @param id [{string}]
	 */
	this.play = play
	/**
	 * Set the stated of a given animation as Paused (default)
	 * @param id [{string}]
	 */
	this.pause = pause
	/**
	 * Scale the given animation to a percetage
	 * @param id [{string}]
	 * @param percentage [{number}] [expected to be a positive number]
	 */
	this.scale = scale
	/**
	 * Move the given animation position
	 * @param id [{string}]
	 * @param x [{number}] [The posion x on the canvas system (positive)]
	 * @param y [{number}] [The posion y on the canvas system (positive)]
	 */
	this.move = move
	/**
	 * Move the given animation position
	 * @param id [{string}]
	 * @param angle [{number}] [The angle to turn the animation by( radix?) ]
	 * @param clockwise [{boolean}] [Clockwise if true (default)]
	 */
	this.rotate = rotate
}
